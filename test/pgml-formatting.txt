# bold text

BEGIN_PGML
*bold text with math [`x + 3`]*
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(Paragraph(StrongEmphasis(EmphasisMark, MathMode(MathModeMark, MathModeMark), EmphasisMark))),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '31'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '31'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '31'
        token: '*'
        type: 'bold'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '1'
            to: '21'
            type: 'text'
            stack: ['bold text with math ']
          ]
          [ # 1
            children: [
              {
                combine: { text: 'type' }
                from: '23'
                to: '28'
                type: 'text'
                stack: ['x + 3']
              }
            ]
            from: '21'
            terminator: '`]'
            to: '30'
            token: '[`'
            type: 'math'
          ]
        ]
      ]
    ]
  ]
]

# italic text

BEGIN_PGML
_italic text_
END_PGML

==>

Program(PGMLBlock(BeginPG, PGMLContent(Paragraph(Emphasis(EmphasisMark, EmphasisMark))), EndPG))

==>

from: '0'
parseAll: 'true'
to: '13'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '13'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '13'
        token: '_'
        type: 'italic'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '1'
            to: '12'
            type: 'text'
            stack: ['italic text']
          ]
        ]
      ]
    ]
  ]
]

# bold italic text

BEGIN_PGML
*_bold italic text_*
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(Paragraph(StrongEmphasis(EmphasisMark, Emphasis(EmphasisMark, EmphasisMark), EmphasisMark))),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '20'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '20'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '20'
        token: '*'
        type: 'bold'
        stack: [
          [ # 0
            from: '1'
            to: '19'
            token: '_'
            type: 'italic'
            stack: [
              [ # 0
                combine: { text: 'type' }
                from: '2'
                to: '18'
                type: 'text'
                stack: ['bold italic text']
              ]
            ]
          ]
        ]
      ]
    ]
  ]
]

# horizontal rules

BEGIN_PGML
first
---
second
===
third
----{200}
===={'50%'}
----{'3in'}{5}
===={ height => 5 }
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Paragraph(
                HorizontalRule,
                HorizontalRule,
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark),
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(StringSingleQuoted)), OptionMark),
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(StringSingleQuoted)), OptionMark),
                Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark),
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(Pair(Identifier, FatComma, Integer))), OptionMark)
            )
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '83'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '83'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '0'
        to: '6'
        type: 'text'
        stack: ['first', '\n']
      ]
      [ # 1
        from: '6'
        options: ['width', 'height', 'size']
        to: '10'
        token: '---'
        type: 'rule'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '10'
        to: '17'
        type: 'text'
        stack: ['second', '\n']
      ]
      [ # 3
        from: '17'
        options: ['width', 'height', 'size']
        to: '21'
        token: '==='
        type: 'rule'
      ]
      [ # 4
        combine: { text: 'type' }
        from: '21'
        to: '27'
        type: 'text'
        stack: ['third', '\n']
      ]
      [ # 5
        from: '27'
        optionStack: [
          {
            from: '31'
            terminator: '}'
            text: '200'
            to: '36'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '36'
        token: '----'
        type: 'rule'
      ]
      [ # 6
        combine: { text: 'type' }
        from: '36'
        to: '37'
        type: 'text'
        stack: ['\n']
      ]
      [ # 7
        from: '37'
        optionStack: [
          {
            from: '41'
            terminator: '}'
            text: ''50%''
            to: '48'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '48'
        token: '===='
        type: 'rule'
      ]
      [ # 8
        combine: { text: 'type' }
        from: '48'
        to: '49'
        type: 'text'
        stack: ['\n']
      ]
      [ # 9
        from: '49'
        optionStack: [
          {
            from: '53'
            terminator: '}'
            text: ''3in''
            to: '60'
            token: '{'
            type: 'options'
          },
          {
            from: '60'
            terminator: '}'
            text: '5'
            to: '63'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '63'
        token: '----'
        type: 'rule'
      ]
      [ # 10
        combine: { text: 'type' }
        from: '63'
        to: '64'
        type: 'text'
        stack: ['\n']
      ]
      [ # 11
        from: '64'
        optionStack: [
          {
            from: '68'
            terminator: '}'
            text: ' height => 5 '
            to: '83'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '83'
        token: '===='
        type: 'rule'
      ]
    ]
  ]
]

# alignment

BEGIN_PGML
>> right justified text [`y = 2x + 3`]
>> centered text [`x = 4`] <<
>> ---{100} <<
>> ----{100}
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Align(AlignMark, MathMode(MathModeMark, MathModeMark)),
            Align(AlignMark, MathMode(MathModeMark, MathModeMark), AlignMark),
            Align(
                AlignMark,
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark),
                AlignMark
            ),
            Align(AlignMark, HorizontalRule, Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark))
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '96'
type: 'root'
stack: [
  [ # 0
    align: 'right'
    from: '0'
    to: '39'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '3'
        to: '24'
        type: 'text'
        stack: ['right justified text ']
      ]
      [ # 1
        children: [
          {
            combine: { text: 'type' }
            from: '26'
            to: '36'
            type: 'text'
            stack: ['y = 2x + 3']
          }
        ]
        from: '24'
        terminator: '`]'
        to: '38'
        token: '[`'
        type: 'math'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '38'
        to: '39'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 1
    align: 'center'
    from: '39'
    terminator: ' <<'
    to: '68'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '42'
        to: '56'
        type: 'text'
        stack: ['centered text ']
      ]
      [ # 1
        children: [
          {
            combine: { text: 'type' }
            from: '58'
            to: '63'
            type: 'text'
            stack: ['x = 4']
          }
        ]
        from: '56'
        terminator: '`]'
        to: '65'
        token: '[`'
        type: 'math'
      ]
    ]
  ]
  [ # 2
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '68'
    indent: '0'
    to: '69'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '68'
        to: '69'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 3
    align: 'center'
    from: '69'
    terminator: ' <<'
    to: '83'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        from: '72'
        optionStack: [
          {
            from: '75'
            terminator: '}'
            text: '100'
            to: '80'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '80'
        token: '---'
        type: 'rule'
      ]
    ]
  ]
  [ # 4
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '83'
    indent: '0'
    to: '84'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '83'
        to: '84'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 5
    align: 'right'
    from: '84'
    to: '96'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        from: '87'
        optionStack: [
          {
            from: '91'
            terminator: '}'
            text: '100'
            to: '96'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '96'
        token: '----'
        type: 'rule'
      ]
    ]
  ]
]

# headings

BEGIN_PGML
# Heading level 1 #
## Heading level 2 ##
### Heading level 3 ###
#### Heading level 4 ####
##### Heading level 5 #####
###### Heading level 6 ######
### Two separate lines ###
### are combined ###

### A whole paragraph
can be a heading ###

### End with two spaces ###  
### for two lines separately ###

### The trailing hashes are optional.
>> ## centered heading ## <<
>> ## right-justified ##
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Paragraph(
                Heading1(HeaderMark, HeaderMark),
                Heading2(HeaderMark, HeaderMark),
                Heading3(HeaderMark, HeaderMark),
                Heading4(HeaderMark, HeaderMark),
                Heading5(HeaderMark, HeaderMark),
                Heading6(HeaderMark, HeaderMark),
                Heading3(HeaderMark, HeaderMark),
                Heading3(HeaderMark, HeaderMark)
            ),
            Paragraph(Heading3(HeaderMark, HeaderMark)),
            Paragraph(Heading3(HeaderMark, HeaderMark), Heading3(HeaderMark, HeaderMark)),
            Paragraph(Heading3(HeaderMark)),
            Align(AlignMark, Heading2(HeaderMark, HeaderMark), AlignMark),
            Align(AlignMark, Heading2(HeaderMark, HeaderMark))
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '398'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '345'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        n: '1'
        terminator: '#'
        to: '19'
        token: '#'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '1'
            to: '18'
            type: 'text'
            stack: [' Heading level 1 ']
          ]
        ]
      ]
      [ # 1
        combine: { text: 'type' }
        from: '19'
        to: '20'
        type: 'text'
        stack: ['\n']
      ]
      [ # 2
        from: '20'
        n: '2'
        terminator: '##'
        to: '41'
        token: '##'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '22'
            to: '39'
            type: 'text'
            stack: [' Heading level 2 ']
          ]
        ]
      ]
      [ # 3
        combine: { text: 'type' }
        from: '41'
        to: '42'
        type: 'text'
        stack: ['\n']
      ]
      [ # 4
        from: '42'
        n: '3'
        terminator: '###'
        to: '65'
        token: '###'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '45'
            to: '62'
            type: 'text'
            stack: [' Heading level 3 ']
          ]
        ]
      ]
      [ # 5
        combine: { text: 'type' }
        from: '65'
        to: '66'
        type: 'text'
        stack: ['\n']
      ]
      [ # 6
        from: '66'
        n: '4'
        terminator: '####'
        to: '91'
        token: '####'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '70'
            to: '87'
            type: 'text'
            stack: [' Heading level 4 ']
          ]
        ]
      ]
      [ # 7
        combine: { text: 'type' }
        from: '91'
        to: '92'
        type: 'text'
        stack: ['\n']
      ]
      [ # 8
        from: '92'
        n: '5'
        terminator: '#####'
        to: '119'
        token: '#####'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '97'
            to: '114'
            type: 'text'
            stack: [' Heading level 5 ']
          ]
        ]
      ]
      [ # 9
        combine: { text: 'type' }
        from: '119'
        to: '120'
        type: 'text'
        stack: ['\n']
      ]
      [ # 10
        from: '120'
        n: '6'
        terminator: '######'
        to: '149'
        token: '######'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '126'
            to: '143'
            type: 'text'
            stack: [' Heading level 6 ']
          ]
        ]
      ]
      [ # 11
        combine: { text: 'type' }
        from: '149'
        to: '150'
        type: 'text'
        stack: ['\n']
      ]
      [ # 12
        from: '150'
        n: '3'
        terminator: '###'
        to: '176'
        token: '###'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '153'
            to: '173'
            type: 'text'
            stack: [' Two separate lines ']
          ]
        ]
      ]
      [ # 13
        combine: { text: 'type' }
        from: '176'
        to: '177'
        type: 'text'
        stack: ['\n']
      ]
      [ # 14
        from: '177'
        n: '3'
        terminator: '###'
        to: '197'
        token: '###'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '180'
            to: '194'
            type: 'text'
            stack: [' are combined ']
          ]
        ]
      ]
      [ # 15
        from: '197'
        noIndent: '1'
        to: '199'
        token: '\n\n'
        type: 'par'
      ]
      [ # 16
        from: '199'
        n: '3'
        terminator: '###'
        to: '241'
        token: '###'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '202'
            to: '238'
            type: 'text'
            stack: [' A whole paragraph', '\n', 'can be a heading ']
          ]
        ]
      ]
      [ # 17
        from: '241'
        noIndent: '1'
        to: '243'
        token: '\n\n'
        type: 'par'
      ]
      [ # 18
        from: '243'
        n: '3'
        terminator: '###'
        to: '270'
        token: '###'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '246'
            to: '267'
            type: 'text'
            stack: [' End with two spaces ']
          ]
        ]
      ]
      [ # 19
        from: '270'
        noIndent: '1'
        to: '273'
        token: '  '
        type: 'break'
      ]
      [ # 20
        from: '273'
        n: '3'
        terminator: '###'
        to: '305'
        token: '###'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '276'
            to: '302'
            type: 'text'
            stack: [' for two lines separately ']
          ]
        ]
      ]
      [ # 21
        from: '305'
        noIndent: '1'
        to: '307'
        token: '\n\n'
        type: 'par'
      ]
      [ # 22
        from: '307'
        n: '3'
        to: '345'
        token: '###'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '310'
            to: '345'
            type: 'text'
            stack: [' The trailing hashes are optional.', '\n']
          ]
        ]
      ]
    ]
  ]
  [ # 1
    align: 'center'
    from: '345'
    terminator: ' <<'
    to: '373'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        from: '348'
        n: '2'
        terminator: '##'
        to: '370'
        token: '##'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '350'
            to: '368'
            type: 'text'
            stack: [' centered heading ']
          ]
        ]
      ]
    ]
  ]
  [ # 2
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '373'
    indent: '0'
    to: '374'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '373'
        to: '374'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 3
    align: 'right'
    from: '374'
    to: '398'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        from: '377'
        n: '2'
        terminator: '##'
        to: '398'
        token: '##'
        type: 'heading'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '379'
            to: '396'
            type: 'text'
            stack: [' right-justified ']
          ]
        ]
      ]
    ]
  ]
]
