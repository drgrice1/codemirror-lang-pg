# bold text

BEGIN_PGML
*bold text with math [`x + 3`]*
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(Paragraph(StrongEmphasis(EmphasisMark, MathMode(MathModeMark, MathModeMark), EmphasisMark))),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '32'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '32'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '31'
        token: '*'
        type: 'bold'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '1'
            to: '21'
            type: 'text'
            stack: ['bold text with math ']
          ]
          [ # 1
            children: [
              {
                combine: { text: 'type' }
                from: '23'
                to: '28'
                type: 'text'
                stack: ['x + 3']
              }
            ]
            from: '21'
            terminator: '`]'
            to: '30'
            token: '[`'
            type: 'math'
          ]
        ]
      ]
      [ # 1
        combine: { text: 'type' }
        from: '31'
        to: '32'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# italic text

BEGIN_PGML
_italic text_
END_PGML

==>

Program(PGMLBlock(BeginPG, PGMLContent(Paragraph(Emphasis(EmphasisMark, EmphasisMark))), EndPG))

==>

from: '0'
parseAll: 'true'
to: '14'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '14'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '13'
        token: '_'
        type: 'italic'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '1'
            to: '12'
            type: 'text'
            stack: ['italic text']
          ]
        ]
      ]
      [ # 1
        combine: { text: 'type' }
        from: '13'
        to: '14'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# bold italic text

BEGIN_PGML
*_bold italic text_*
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(Paragraph(StrongEmphasis(EmphasisMark, Emphasis(EmphasisMark, EmphasisMark), EmphasisMark))),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '21'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '21'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '20'
        token: '*'
        type: 'bold'
        stack: [
          [ # 0
            from: '1'
            to: '19'
            token: '_'
            type: 'italic'
            stack: [
              [ # 0
                combine: { text: 'type' }
                from: '2'
                to: '18'
                type: 'text'
                stack: ['bold italic text']
              ]
            ]
          ]
        ]
      ]
      [ # 1
        combine: { text: 'type' }
        from: '20'
        to: '21'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# horizontal rules

BEGIN_PGML
first
---
second
===
third
----{200}
===={'50%'}
----{'3in'}{5}
===={ height => 5 }
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Paragraph(
                HorizontalRule,
                HorizontalRule,
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark),
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(StringSingleQuoted)), OptionMark),
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(StringSingleQuoted)), OptionMark),
                Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark),
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(Pair(Identifier, FatComma, Integer))), OptionMark)
            )
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '84'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '84'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '0'
        to: '6'
        type: 'text'
        stack: ['first', '\n']
      ]
      [ # 1
        from: '6'
        options: ['width', 'height', 'size']
        to: '9'
        token: '---'
        type: 'rule'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '10'
        to: '17'
        type: 'text'
        stack: ['second', '\n']
      ]
      [ # 3
        from: '17'
        options: ['width', 'height', 'size']
        to: '20'
        token: '==='
        type: 'rule'
      ]
      [ # 4
        combine: { text: 'type' }
        from: '21'
        to: '27'
        type: 'text'
        stack: ['third', '\n']
      ]
      [ # 5
        from: '27'
        optionStack: [
          {
            from: '31'
            terminator: '}'
            text: '200'
            to: '36'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '36'
        token: '----'
        type: 'rule'
      ]
      [ # 6
        combine: { text: 'type' }
        from: '36'
        to: '37'
        type: 'text'
        stack: ['\n']
      ]
      [ # 7
        from: '37'
        optionStack: [
          {
            from: '41'
            terminator: '}'
            text: ''50%''
            to: '48'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '48'
        token: '===='
        type: 'rule'
      ]
      [ # 8
        combine: { text: 'type' }
        from: '48'
        to: '49'
        type: 'text'
        stack: ['\n']
      ]
      [ # 9
        from: '49'
        optionStack: [
          {
            from: '53'
            terminator: '}'
            text: ''3in''
            to: '60'
            token: '{'
            type: 'options'
          },
          {
            from: '60'
            terminator: '}'
            text: '5'
            to: '63'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '63'
        token: '----'
        type: 'rule'
      ]
      [ # 10
        combine: { text: 'type' }
        from: '63'
        to: '64'
        type: 'text'
        stack: ['\n']
      ]
      [ # 11
        from: '64'
        optionStack: [
          {
            from: '68'
            terminator: '}'
            text: ' height => 5 '
            to: '83'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '83'
        token: '===='
        type: 'rule'
      ]
      [ # 12
        combine: { text: 'type' }
        from: '83'
        to: '84'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# alignment

BEGIN_PGML
>> right justified text [`y = 2x + 3`]
>> centered text [`x = 4`] <<
>> ---{100} <<
>> ----{100}
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Align(AlignMark, MathMode(MathModeMark, MathModeMark)),
            Align(AlignMark, MathMode(MathModeMark, MathModeMark), AlignMark),
            Align(
                AlignMark,
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark),
                AlignMark
            ),
            Align(AlignMark, HorizontalRule, Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark))
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '97'
type: 'root'
stack: [
  [ # 0
    align: 'right'
    from: '0'
    to: '39'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '3'
        to: '24'
        type: 'text'
        stack: ['right justified text ']
      ]
      [ # 1
        children: [
          {
            combine: { text: 'type' }
            from: '26'
            to: '36'
            type: 'text'
            stack: ['y = 2x + 3']
          }
        ]
        from: '24'
        terminator: '`]'
        to: '38'
        token: '[`'
        type: 'math'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '38'
        to: '39'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 1
    align: 'center'
    from: '39'
    terminator: ' <<'
    to: '68'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '42'
        to: '56'
        type: 'text'
        stack: ['centered text ']
      ]
      [ # 1
        children: [
          {
            combine: { text: 'type' }
            from: '58'
            to: '63'
            type: 'text'
            stack: ['x = 4']
          }
        ]
        from: '56'
        terminator: '`]'
        to: '65'
        token: '[`'
        type: 'math'
      ]
    ]
  ]
  [ # 2
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '68'
    indent: '0'
    to: '69'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '68'
        to: '69'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 3
    align: 'center'
    from: '69'
    terminator: ' <<'
    to: '83'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        from: '72'
        optionStack: [
          {
            from: '75'
            terminator: '}'
            text: '100'
            to: '80'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '80'
        token: '---'
        type: 'rule'
      ]
    ]
  ]
  [ # 4
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '83'
    indent: '0'
    to: '84'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '83'
        to: '84'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 5
    align: 'right'
    from: '84'
    to: '97'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        from: '87'
        optionStack: [
          {
            from: '91'
            terminator: '}'
            text: '100'
            to: '96'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '96'
        token: '----'
        type: 'rule'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '96'
        to: '97'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# verbatim

BEGIN_PGML
[|This math markup [:x+1:] is not processed.|]
[||This is [|verbatim|].||]
[|verbatim content with pre|]*
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Paragraph(
                Verbatim(VerbatimMark, VerbatimMark),
                Verbatim(VerbatimMark, VerbatimMark),
                Verbatim(VerbatimMark, VerbatimMark)
            )
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '106'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '106'
    type: 'indent'
    stack: [
      [ # 0
        allowStar: 'true'
        from: '0'
        terminator: '|]'
        text: 'This math markup [:x+1:] is not processed.'
        textFrom: '2'
        to: '46'
        token: '[|'
        type: 'verbatim'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '46'
        to: '47'
        type: 'text'
        stack: ['\n']
      ]
      [ # 2
        allowStar: 'true'
        from: '47'
        terminator: '||]'
        text: 'This is [|verbatim|].'
        textFrom: '50'
        to: '74'
        token: '[||'
        type: 'verbatim'
      ]
      [ # 3
        combine: { text: 'type' }
        from: '74'
        to: '75'
        type: 'text'
        stack: ['\n']
      ]
      [ # 4
        allowStar: 'true'
        from: '75'
        hasStar: '1'
        terminator: '|]'
        text: 'verbatim content with pre'
        textFrom: '77'
        to: '105'
        token: '[|'
        type: 'verbatim'
      ]
      [ # 5
        combine: { text: 'type' }
        from: '105'
        to: '106'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# pre

BEGIN_PGML
:   This is preformatted,
:       and can include any text, e.g., <, >, $, etc.,
:       but [@ "commands" @], [$s], and other *markup* are performed normally.
:   Use verbatim mode like [|[@ "commands" @]|] if you want to include commands/substitutions literally,
:   or use a slash to escape them: \[$s].

    Here is some indenting
    :   with preformatting
    :   on several lines.
    Now back to normal, but indented.
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Pre(PreMark),
            Pre(PreMark),
            Pre(
                PreMark,
                PerlCommand(
                    PerlCommandMark,
                    Program(ExpressionStatement(StringDoubleQuoted(InterpolatedStringContent))),
                    PerlCommandMark
                ),
                Variable(VariableMark, Program(ExpressionStatement(ScalarVariable)), VariableMark),
                StrongEmphasis(EmphasisMark, EmphasisMark)
            ),
            Pre(PreMark, Verbatim(VerbatimMark, VerbatimMark)),
            Pre(PreMark, EscapeSequence),
            Paragraph(Pre(PreMark), Pre(PreMark))
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '426'
type: 'root'
stack: [
  [ # 0
    from: '0'
    terminator: ''
    to: '26'
    token: ':   '
    type: 'pre'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '4'
        to: '26'
        type: 'text'
        stack: ['This is preformatted,', '\n']
      ]
    ]
  ]
  [ # 1
    from: '26'
    terminator: ''
    to: '81'
    token: ':   '
    type: 'pre'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '30'
        to: '81'
        type: 'text'
        stack: ['    and can include any text, e.g., <, >, $, etc.,', '\n']
      ]
    ]
  ]
  [ # 2
    from: '81'
    terminator: ''
    to: '160'
    token: ':   '
    type: 'pre'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '85'
        to: '93'
        type: 'text'
        stack: ['    but ']
      ]
      [ # 1
        allowDblStar: 'true'
        allowStar: 'true'
        allowTriStar: 'true'
        from: '93'
        parseQuoted: 'true'
        terminator: '@]'
        text: ' "commands" '
        textFrom: '95'
        to: '109'
        token: '[@'
        type: 'command'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '109'
        to: '111'
        type: 'text'
        stack: [', ']
      ]
      [ # 3
        allowDblStar: 'true'
        allowStar: 'true'
        allowTriStar: 'true'
        from: '111'
        terminator: ']'
        text: 's'
        textFrom: '113'
        to: '115'
        token: '[$'
        type: 'variable'
      ]
      [ # 4
        combine: { text: 'type' }
        from: '115'
        to: '127'
        type: 'text'
        stack: [', and other ']
      ]
      [ # 5
        from: '127'
        to: '135'
        token: '*'
        type: 'bold'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '128'
            to: '134'
            type: 'text'
            stack: ['markup']
          ]
        ]
      ]
      [ # 6
        combine: { text: 'type' }
        from: '135'
        to: '160'
        type: 'text'
        stack: [' are performed normally.', '\n']
      ]
    ]
  ]
  [ # 3
    from: '160'
    terminator: ''
    to: '265'
    token: ':   '
    type: 'pre'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '164'
        to: '187'
        type: 'text'
        stack: ['Use verbatim mode like ']
      ]
      [ # 1
        allowStar: 'true'
        from: '187'
        terminator: '|]'
        text: '[@ "commands" @]'
        textFrom: '189'
        to: '207'
        token: '[|'
        type: 'verbatim'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '207'
        to: '265'
        type: 'text'
        stack: [' if you want to include commands/substitutions literally,', '\n']
      ]
    ]
  ]
  [ # 4
    from: '265'
    terminator: ''
    to: '306'
    token: ':   '
    type: 'pre'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '269'
        to: '300'
        type: 'text'
        stack: ['or use a slash to escape them: ']
      ]
      [ # 1
        from: '300'
        to: '302'
        token: '\['
        type: 'slash'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '302'
        to: '306'
        type: 'text'
        stack: ['$s', ']', '.']
      ]
    ]
  ]
  [ # 5
    from: '306'
    noIndent: '1'
    to: '308'
    token: '\n\n'
    type: 'par'
  ]
  [ # 6
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '312'
    indent: '1'
    to: '426'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '312'
        to: '339'
        type: 'text'
        stack: ['Here is some indenting', '\n']
      ]
      [ # 1
        from: '339'
        terminator: ''
        to: '362'
        token: ':   '
        type: 'pre'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '343'
            to: '362'
            type: 'text'
            stack: ['with preformatting', '\n']
          ]
        ]
      ]
      [ # 2
        from: '366'
        terminator: ''
        to: '388'
        token: ':   '
        type: 'pre'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '370'
            to: '388'
            type: 'text'
            stack: ['on several lines.', '\n']
          ]
        ]
      ]
      [ # 3
        combine: { text: 'type' }
        from: '392'
        to: '426'
        type: 'text'
        stack: ['Now back to normal, but indented.', '\n']
      ]
    ]
  ]
]

# escape sequences

BEGIN_PGML
\"dumb quotes\"
\[$not variable]
END_PGML

==>

Program(PGMLBlock(BeginPG, PGMLContent(Paragraph(EscapeSequence, EscapeSequence, EscapeSequence)), EndPG))

==>

from: '0'
parseAll: 'true'
to: '33'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '33'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '2'
        token: '\"'
        type: 'slash'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '2'
        to: '13'
        type: 'text'
        stack: ['dumb quotes']
      ]
      [ # 2
        from: '13'
        to: '15'
        token: '\"'
        type: 'slash'
      ]
      [ # 3
        combine: { text: 'type' }
        from: '15'
        to: '16'
        type: 'text'
        stack: ['\n']
      ]
      [ # 4
        from: '16'
        to: '18'
        token: '\['
        type: 'slash'
      ]
      [ # 5
        combine: { text: 'type' }
        from: '18'
        to: '33'
        type: 'text'
        stack: ['$not variable', ']', '\n']
      ]
    ]
  ]
]
