# bold text

BEGIN_PGML
*bold text with math [`x + 3`]*
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(Paragraph(StrongEmphasis(EmphasisMark, MathMode(MathModeMark, MathModeMark), EmphasisMark))),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '31'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '31'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '31'
        token: '*'
        type: 'bold'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '1'
            to: '21'
            type: 'text'
            stack: ['bold text with math ']
          ]
          [ # 1
            children: [
              {
                combine: { text: 'type' }
                from: '23'
                to: '28'
                type: 'text'
                stack: ['x + 3']
              }
            ]
            from: '21'
            terminator: '`]'
            to: '30'
            token: '[`'
            type: 'math'
          ]
        ]
      ]
    ]
  ]
]

# italic text

BEGIN_PGML
_italic text_
END_PGML

==>

Program(PGMLBlock(BeginPG, PGMLContent(Paragraph(Emphasis(EmphasisMark, EmphasisMark))), EndPG))

==>

from: '0'
parseAll: 'true'
to: '13'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '13'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '13'
        token: '_'
        type: 'italic'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '1'
            to: '12'
            type: 'text'
            stack: ['italic text']
          ]
        ]
      ]
    ]
  ]
]

# bold italic text

BEGIN_PGML
*_bold italic text_*
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(Paragraph(StrongEmphasis(EmphasisMark, Emphasis(EmphasisMark, EmphasisMark), EmphasisMark))),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '20'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '20'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        to: '20'
        token: '*'
        type: 'bold'
        stack: [
          [ # 0
            from: '1'
            to: '19'
            token: '_'
            type: 'italic'
            stack: [
              [ # 0
                combine: { text: 'type' }
                from: '2'
                to: '18'
                type: 'text'
                stack: ['bold italic text']
              ]
            ]
          ]
        ]
      ]
    ]
  ]
]

# horizontal rules

BEGIN_PGML
first
---
second
===
third
----{200}
===={'50%'}
----{'3in'}{5}
===={ height => 5 }
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Paragraph(
                HorizontalRule,
                HorizontalRule,
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark),
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(StringSingleQuoted)), OptionMark),
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(StringSingleQuoted)), OptionMark),
                Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark),
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(Pair(Identifier, FatComma, Integer))), OptionMark)
            )
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '83'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '83'
    type: 'indent'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '0'
        to: '6'
        type: 'text'
        stack: ['first', '\n']
      ]
      [ # 1
        from: '6'
        options: ['width', 'height', 'size']
        to: '10'
        token: '---'
        type: 'rule'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '10'
        to: '17'
        type: 'text'
        stack: ['second', '\n']
      ]
      [ # 3
        from: '17'
        options: ['width', 'height', 'size']
        to: '21'
        token: '==='
        type: 'rule'
      ]
      [ # 4
        combine: { text: 'type' }
        from: '21'
        to: '27'
        type: 'text'
        stack: ['third', '\n']
      ]
      [ # 5
        from: '27'
        optionStack: [
          {
            from: '31'
            terminator: '}'
            text: '200'
            to: '36'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '36'
        token: '----'
        type: 'rule'
      ]
      [ # 6
        combine: { text: 'type' }
        from: '36'
        to: '37'
        type: 'text'
        stack: ['\n']
      ]
      [ # 7
        from: '37'
        optionStack: [
          {
            from: '41'
            terminator: '}'
            text: ''50%''
            to: '48'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '48'
        token: '===='
        type: 'rule'
      ]
      [ # 8
        combine: { text: 'type' }
        from: '48'
        to: '49'
        type: 'text'
        stack: ['\n']
      ]
      [ # 9
        from: '49'
        optionStack: [
          {
            from: '53'
            terminator: '}'
            text: ''3in''
            to: '60'
            token: '{'
            type: 'options'
          },
          {
            from: '60'
            terminator: '}'
            text: '5'
            to: '63'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '63'
        token: '----'
        type: 'rule'
      ]
      [ # 10
        combine: { text: 'type' }
        from: '63'
        to: '64'
        type: 'text'
        stack: ['\n']
      ]
      [ # 11
        from: '64'
        optionStack: [
          {
            from: '68'
            terminator: '}'
            text: ' height => 5 '
            to: '83'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '83'
        token: '===='
        type: 'rule'
      ]
    ]
  ]
]

# alignment

BEGIN_PGML
>> right justified text [`y = 2x + 3`]
>> centered text [`x = 4`] <<
>> ---{100} <<
>> ----{100}
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Align(AlignMark, MathMode(MathModeMark, MathModeMark)),
            Align(AlignMark, MathMode(MathModeMark, MathModeMark), AlignMark),
            Align(
                AlignMark,
                HorizontalRule,
                Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark),
                AlignMark
            ),
            Align(AlignMark, HorizontalRule, Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark))
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '96'
type: 'root'
stack: [
  [ # 0
    align: 'right'
    breakInside: 'true'
    from: '0'
    to: '39'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '3'
        to: '24'
        type: 'text'
        stack: ['right justified text ']
      ]
      [ # 1
        children: [
          {
            combine: { text: 'type' }
            from: '26'
            to: '36'
            type: 'text'
            stack: ['y = 2x + 3']
          }
        ]
        from: '24'
        terminator: '`]'
        to: '38'
        token: '[`'
        type: 'math'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '38'
        to: '39'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 1
    align: 'center'
    breakInside: 'true'
    from: '39'
    terminator: ' <<'
    to: '66'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        combine: { text: 'type' }
        from: '42'
        to: '56'
        type: 'text'
        stack: ['centered text ']
      ]
      [ # 1
        children: [
          {
            combine: { text: 'type' }
            from: '58'
            to: '63'
            type: 'text'
            stack: ['x = 4']
          }
        ]
        from: '56'
        terminator: '`]'
        to: '65'
        token: '[`'
        type: 'math'
      ]
      [ # 2
        combine: { text: 'type' }
        from: '65'
        to: '66'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 2
    align: 'center'
    breakInside: 'true'
    from: '69'
    terminator: ' <<'
    to: '81'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        from: '72'
        optionStack: [
          {
            from: '75'
            terminator: '}'
            text: '100'
            to: '80'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '80'
        token: '---'
        type: 'rule'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '80'
        to: '81'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
  [ # 3
    align: 'right'
    breakInside: 'true'
    from: '84'
    to: '96'
    token: '>> '
    type: 'align'
    stack: [
      [ # 0
        from: '87'
        optionStack: [
          {
            from: '91'
            terminator: '}'
            text: '100'
            to: '96'
            token: '{'
            type: 'options'
          }
        ]
        options: ['width', 'height', 'size']
        to: '96'
        token: '----'
        type: 'rule'
      ]
    ]
  ]
]
