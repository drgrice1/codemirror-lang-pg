# variable declaration and assignment

my $scalar = 3;
my @array = (1, 2);
my %hash = (a => 3, b => 2);
my ($var1, $var2) = (1, 2);

==>

Program(
    ExpressionStatement(Assignment(VariableDeclaration(my, ScalarVariable), "=", Integer), ";"),
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ArrayVariable), "=", List("(", Integer, Comma, Integer, ")")), ";"
    ),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, HashVariable),
            "=",
            List("(", Pair(Identifier, FatComma, Integer), Comma, Pair(Identifier, FatComma, Integer), ")")
        ),
        ";"
    ),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, "(", ScalarVariable, Comma, ScalarVariable, ")"),
            "=",
            List("(", Integer, Comma, Integer, ")")
        ),
        ";"
    )
)

# update operators

$var **= 2;
$var *= 2;
$var /= 2;
$var %= 2;
$var += 2;
$var -= 2;
$var .= 'a';
$var <<= 2;
$var >>= 2;
$var &= 2;
$var &.= 2;
$var &&= 2;
$var ^= 2;
$var ^.= 2;
$var |= 2;
$var ||= 2;
$var |.= 2;
$var //= 2;
$var x= 2;

==>

Program(
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, StringSingleQuoted), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, UpdateOp, Integer), ";"),
    ExpressionStatement(UpdateExpression(ScalarVariable, x, "=", Integer), ";")
)

# variable dereferencing

$$var;
${$var};
@$var;
@{$var};
%$var;
%{$var};
*{$var};
*$var;
&{ $pkg . "::$var" };
&$var;

==>

Program(
    ExpressionStatement(ScalarDereference("$", ScalarVariable), ";"),
    ExpressionStatement(ScalarDereference("$", "{", ScalarVariable, "}"), ";"),
    ExpressionStatement(ArrayDereference("@", ScalarVariable), ";"),
    ExpressionStatement(ArrayDereference("@" "{", ScalarVariable, "}"), ";"),
    ExpressionStatement(HashDereference("%", ScalarVariable), ";"),
    ExpressionStatement(HashDereference("%", "{", ScalarVariable, "}"), ";"),
    ExpressionStatement(TypeGlobDereference("*", "{", ScalarVariable, "}"), ";"),
    ExpressionStatement(TypeGlobDereference("*", ScalarVariable), ";"),
    ExpressionStatement(
        FunctionDereference(
            "&",
            "{",
            BinaryExpression(ScalarVariable, ConcatOp, StringDoubleQuoted(InterpolatedStringContent, ScalarVariable)),
            "}"
        ),
        ";"
    ),
    ExpressionStatement(FunctionDereference("&", ScalarVariable), ";")
)

# hash and array references

my $var = \@array;
my $var = [1, 2];
my $var = { a => 1, b => 2 };
my $var = +{ a => 1, b => 2 };

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", UnaryExpression(RefOp, ArrayVariable)),
        ";"
    ),
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", ArrayRef("[", Integer, Comma, Integer, "]")),
        ";"
    ),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            HashRef("{", Pair(Identifier, FatComma, Integer), Comma, Pair(Identifier, FatComma, Integer), "}")
        ),
        ";"
    ),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            HashRef(ArithOp, "{", Pair(Identifier, FatComma, Integer), Comma, Pair(Identifier, FatComma, Integer), "}")
        ),
        ";"
    )
)

# hash and array accessors

$var[1];
$var[1][2];
$var->[1];
$var->[-1];
$var->[1][1];
$var->[1]->[1];
$var{a};
$var{a}{b};
$var->{a};
$var->{'-1 + 3'};
$var->{a}{a};
$var->{a}->{a};

==>

Program(
    ExpressionStatement(ArrayAccessVariable(ScalarVariable, "[", Integer, "]"), ";"),
    ExpressionStatement(
        ArrayAccessVariable(ArrayAccessVariable(ScalarVariable, "[", Integer, "]"), "[", Integer, "]"),
        ";"
    ),
    ExpressionStatement(ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"), ";"),
    ExpressionStatement(
        ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", UnaryExpression(ArithOp, Integer), "]"),
        ";"
    ),
    ExpressionStatement(
        ArrayAccessVariable(ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"), "[", Integer, "]"),
        ";"
    ),
    ExpressionStatement(
        ArrayAccessVariable(
            ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
            ArrowOperator,
            "[",
            Integer,
            "]"
        ),
        ";"
    ),
    ExpressionStatement(HashAccessVariable(ScalarVariable, "{", Identifier, "}"), ";"),
    ExpressionStatement(
        HashAccessVariable(HashAccessVariable(ScalarVariable, "{", Identifier, "}"), "{", Identifier, "}"),
        ";"
    ),
    ExpressionStatement(HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"), ";"),
    ExpressionStatement(HashAccessVariable(ScalarVariable, ArrowOperator, "{", StringSingleQuoted, "}"), ";"),
    ExpressionStatement(
        HashAccessVariable(
            HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
            "{",
            Identifier,
            "}"
        ),
        ";"
    ),
    ExpressionStatement(
        HashAccessVariable(
            HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
            ArrowOperator,
            "{",
            Identifier,
            "}"
        ),
        ";"
    )
)

# special scalar variables

$!;
$@;
$$;
$^E;
${^CHILD_ERROR_NATIVE};

==>

Program(
    ExpressionStatement(SpecialScalarVariable, ";"),
    ExpressionStatement(SpecialScalarVariable, ";"),
    ExpressionStatement(SpecialScalarVariable, ";"),
    ExpressionStatement(SpecialScalarVariable, ";"),
    ExpressionStatement(SpecialScalarVariable, ";")
)

# type globs

*this = *that;
local *Here::blue = \$There::green;
$fh = *STDOUT;
$fh = \*STDOUT;
local *fh;
*foo{THING};

==>

Program(
    ExpressionStatement(Assignment(TypeGlob, "=", TypeGlob), ";"),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(local, TypeGlob),
            "=",
            UnaryExpression(RefOp, PackageVariable(PackageName(ScalarVariable), "::", PackageVariableName(Identifier)))
        ),
        ";"
    ),
    ExpressionStatement(Assignment(ScalarVariable, "=", TypeGlob), ";"),
    ExpressionStatement(Assignment(ScalarVariable, "=", UnaryExpression(RefOp, TypeGlob)), ";"),
    ExpressionStatement(VariableDeclaration(local, TypeGlob), ";"),
    ExpressionStatement(HashAccessVariable(TypeGlob, "{", Identifier, "}"), ";")
)

# package variables

$Package::SubPackage::VERSION = '2.16';
@Package::SubPackage::array = (1, 2, 3);
%Package::SubPackage::hash = (a => 3, b => 4);
$Package::SubPackage::1var = 3;

==>

Program(
    ExpressionStatement(
        Assignment(
            PackageVariable(PackageName(ScalarVariable, "::", Identifier), "::", PackageVariableName(Identifier)),
            "=",
            StringSingleQuoted
        ),
        ";"
    ),
    ExpressionStatement(
        Assignment(
            PackageVariable(PackageName(ArrayVariable, "::", Identifier), "::", PackageVariableName(Identifier)),
            "=",
            List("(", Integer, Comma, Integer, Comma, Integer, ")")
        ),
        ";"
    ),
    ExpressionStatement(
        Assignment(
            PackageVariable(PackageName(HashVariable, "::", Identifier), "::", PackageVariableName(Identifier)),
            "=",
            List("(", Pair(Identifier, FatComma, Integer), Comma, Pair(Identifier, FatComma, Integer), ")")
        ),
        ";"
    ),
    ExpressionStatement(
        Assignment(
            PackageVariable(
                PackageName(ScalarVariable, "::", Identifier),
                "::",
                PackageVariableName(UnrestrictedIdentifier)
            ),
            "=",
            Integer
        ),
        ";"
    )
)
