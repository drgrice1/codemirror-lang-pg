# inline math

BEGIN_PGML
[`\frac{[$a]\pi}{3}`]
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 41,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 41,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 11,
                    "to": 33,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 11,
                            "to": 33,
                            "children": [
                                {
                                    "name": "MathMode",
                                    "from": 11,
                                    "to": 32,
                                    "children": [
                                        { "name": "MathModeMark", "from": 11, "to": 13 },
                                        {
                                            "name": "Variable",
                                            "from": 19,
                                            "to": 23,
                                            "children": [
                                                { "name": "VariableMark", "from": 19, "to": 20 },
                                                {
                                                    "name": "Program",
                                                    "from": 20,
                                                    "to": 22,
                                                    "children": [
                                                        {
                                                            "name": "ExpressionStatement",
                                                            "from": 20,
                                                            "to": 22,
                                                            "children": [
                                                                { "name": "ScalarVariable", "from": 20, "to": 22 }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                { "name": "VariableMark", "from": 22, "to": 23 }
                                            ]
                                        },
                                        { "name": "MathModeMark", "from": 30, "to": 32 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 33, "to": 41 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '22'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '22'
    type: 'indent'
    stack: [
      [ # 0
        children: [
          {
            combine: { text: 'type' }
            from: '2'
            to: '8'
            type: 'text'
            stack: ['\frac{']
          },
          {
            allowDblStar: 'true'
            allowStar: 'true'
            allowTriStar: 'true'
            from: '8'
            terminator: ']'
            text: 'a'
            textFrom: '10'
            to: '12'
            token: '[$'
            type: 'variable'
          },
          {
            combine: { text: 'type' }
            from: '12'
            to: '19'
            type: 'text'
            stack: ['\pi}{3}']
          }
        ]
        from: '0'
        terminator: '`]'
        to: '21'
        token: '[`'
        type: 'math'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '21'
        to: '22'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# display style math

BEGIN_PGML
[``\frac{4[$a]\pi}{3}``]
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 44,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 44,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 11,
                    "to": 36,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 11,
                            "to": 36,
                            "children": [
                                {
                                    "name": "MathMode",
                                    "from": 11,
                                    "to": 35,
                                    "children": [
                                        { "name": "MathModeMark", "from": 11, "to": 14 },
                                        {
                                            "name": "Variable",
                                            "from": 21,
                                            "to": 25,
                                            "children": [
                                                { "name": "VariableMark", "from": 21, "to": 22 },
                                                {
                                                    "name": "Program",
                                                    "from": 22,
                                                    "to": 24,
                                                    "children": [
                                                        {
                                                            "name": "ExpressionStatement",
                                                            "from": 22,
                                                            "to": 24,
                                                            "children": [
                                                                { "name": "ScalarVariable", "from": 22, "to": 24 }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                { "name": "VariableMark", "from": 24, "to": 25 }
                                            ]
                                        },
                                        { "name": "MathModeMark", "from": 32, "to": 35 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 36, "to": 44 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '25'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '25'
    type: 'indent'
    stack: [
      [ # 0
        children: [
          {
            combine: { text: 'type' }
            from: '3'
            to: '10'
            type: 'text'
            stack: ['\frac{4']
          },
          {
            allowDblStar: 'true'
            allowStar: 'true'
            allowTriStar: 'true'
            from: '10'
            terminator: ']'
            text: 'a'
            textFrom: '12'
            to: '14'
            token: '[$'
            type: 'variable'
          },
          {
            combine: { text: 'type' }
            from: '14'
            to: '21'
            type: 'text'
            stack: ['\pi}{3}']
          }
        ]
        displaystyle: 'true'
        from: '0'
        terminator: '``]'
        to: '24'
        token: '[``'
        type: 'math'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '24'
        to: '25'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# display math

BEGIN_PGML
[```\frac{[$a + 3]\pi}{3}```]
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 49,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 49,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 11,
                    "to": 41,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 11,
                            "to": 41,
                            "children": [
                                {
                                    "name": "MathMode",
                                    "from": 11,
                                    "to": 40,
                                    "children": [
                                        { "name": "MathModeMark", "from": 11, "to": 15 },
                                        {
                                            "name": "Variable",
                                            "from": 21,
                                            "to": 29,
                                            "children": [
                                                { "name": "VariableMark", "from": 21, "to": 22 },
                                                {
                                                    "name": "Program",
                                                    "from": 22,
                                                    "to": 28,
                                                    "children": [
                                                        {
                                                            "name": "ExpressionStatement",
                                                            "from": 22,
                                                            "to": 28,
                                                            "children": [
                                                                {
                                                                    "name": "BinaryExpression",
                                                                    "from": 22,
                                                                    "to": 28,
                                                                    "children": [
                                                                        { "name": "ScalarVariable", "from": 22, "to": 24 },
                                                                        { "name": "ArithOp", "from": 25, "to": 26 },
                                                                        { "name": "Integer", "from": 27, "to": 28 }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                { "name": "VariableMark", "from": 28, "to": 29 }
                                            ]
                                        },
                                        { "name": "MathModeMark", "from": 36, "to": 40 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 41, "to": 49 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '30'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '30'
    type: 'indent'
    stack: [
      [ # 0
        children: [
          {
            combine: { text: 'type' }
            from: '4'
            to: '10'
            type: 'text'
            stack: ['\frac{']
          },
          {
            allowDblStar: 'true'
            allowStar: 'true'
            allowTriStar: 'true'
            from: '10'
            terminator: ']'
            text: 'a + 3'
            textFrom: '12'
            to: '18'
            token: '[$'
            type: 'variable'
          },
          {
            combine: { text: 'type' }
            from: '18'
            to: '25'
            type: 'text'
            stack: ['\pi}{3}']
          }
        ]
        display: 'true'
        from: '0'
        terminator: '```]'
        to: '29'
        token: '[```'
        type: 'math'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '29'
        to: '30'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# inline parsed math

BEGIN_PGML
[:x^2 + 6x:]
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 32,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 32,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 11,
                    "to": 24,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 11,
                            "to": 24,
                            "children": [
                                {
                                    "name": "MathMode",
                                    "from": 11,
                                    "to": 23,
                                    "children": [
                                        { "name": "MathModeMark", "from": 11, "to": 13 },
                                        { "name": "MathModeMark", "from": 21, "to": 23 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 24, "to": 32 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '13'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '13'
    type: 'indent'
    stack: [
      [ # 0
        allowDblStar: 'true'
        allowStar: 'true'
        allowTriStar: 'true'
        children: [
          {
            combine: { text: 'type' }
            from: '2'
            to: '10'
            type: 'text'
            stack: ['x^2 + 6x']
          }
        ]
        from: '0'
        options: ['context', 'reduced']
        parsed: 'true'
        terminator: ':]'
        to: '12'
        token: '[:'
        type: 'math'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '12'
        to: '13'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# inline parsed math in the active context

BEGIN_PGML
[:x^2 + 3 * 2 x:]*
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 38,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 38,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 11,
                    "to": 30,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 11,
                            "to": 30,
                            "children": [
                                {
                                    "name": "MathMode",
                                    "from": 11,
                                    "to": 29,
                                    "children": [
                                        { "name": "MathModeMark", "from": 11, "to": 13 },
                                        { "name": "MathModeMark", "from": 26, "to": 29 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 30, "to": 38 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '19'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '19'
    type: 'indent'
    stack: [
      [ # 0
        allowDblStar: 'true'
        allowStar: 'true'
        allowTriStar: 'true'
        children: [
          {
            combine: { text: 'type' }
            from: '2'
            to: '15'
            type: 'text'
            stack: ['x^2 + 3 * 2 x']
          }
        ]
        from: '0'
        hasStar: '1'
        options: ['context', 'reduced']
        parsed: 'true'
        terminator: ':]'
        to: '18'
        token: '[:'
        type: 'math'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '18'
        to: '19'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# inline parsed math with reductions

BEGIN_PGML
[:x^2 + 3 * 2 x:]**
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 39,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 39,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 11,
                    "to": 31,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 11,
                            "to": 31,
                            "children": [
                                {
                                    "name": "MathMode",
                                    "from": 11,
                                    "to": 30,
                                    "children": [
                                        { "name": "MathModeMark", "from": 11, "to": 13 },
                                        { "name": "MathModeMark", "from": 26, "to": 30 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 31, "to": 39 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '20'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '20'
    type: 'indent'
    stack: [
      [ # 0
        allowDblStar: 'true'
        allowStar: 'true'
        allowTriStar: 'true'
        children: [
          {
            combine: { text: 'type' }
            from: '2'
            to: '15'
            type: 'text'
            stack: ['x^2 + 3 * 2 x']
          }
        ]
        from: '0'
        hasDblStar: 'true'
        options: ['context', 'reduced']
        parsed: 'true'
        terminator: ':]'
        to: '19'
        token: '[:'
        type: 'math'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '19'
        to: '20'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# inline parsed math in the active context with reductions

BEGIN_PGML
[:x^2 + 3 * 2 x:]***
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 40,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 40,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 11,
                    "to": 32,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 11,
                            "to": 32,
                            "children": [
                                {
                                    "name": "MathMode",
                                    "from": 11,
                                    "to": 31,
                                    "children": [
                                        { "name": "MathModeMark", "from": 11, "to": 13 },
                                        { "name": "MathModeMark", "from": 26, "to": 31 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 32, "to": 40 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '21'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '21'
    type: 'indent'
    stack: [
      [ # 0
        allowDblStar: 'true'
        allowStar: 'true'
        allowTriStar: 'true'
        children: [
          {
            combine: { text: 'type' }
            from: '2'
            to: '15'
            type: 'text'
            stack: ['x^2 + 3 * 2 x']
          }
        ]
        from: '0'
        hasStar: '3'
        options: ['context', 'reduced']
        parsed: 'true'
        terminator: ':]'
        to: '20'
        token: '[:'
        type: 'math'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '20'
        to: '21'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# display style parsed math

BEGIN_PGML
[::x^2 + 6x::]
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 34,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 34,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 11,
                    "to": 26,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 11,
                            "to": 26,
                            "children": [
                                {
                                    "name": "MathMode",
                                    "from": 11,
                                    "to": 25,
                                    "children": [
                                        { "name": "MathModeMark", "from": 11, "to": 14 },
                                        { "name": "MathModeMark", "from": 22, "to": 25 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 26, "to": 34 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '15'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '15'
    type: 'indent'
    stack: [
      [ # 0
        allowDblStar: 'true'
        allowStar: 'true'
        allowTriStar: 'true'
        children: [
          {
            combine: { text: 'type' }
            from: '3'
            to: '11'
            type: 'text'
            stack: ['x^2 + 6x']
          }
        ]
        displaystyle: 'true'
        from: '0'
        options: ['context', 'reduced']
        parsed: 'true'
        terminator: '::]'
        to: '14'
        token: '[::'
        type: 'math'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '14'
        to: '15'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# display parsed math

BEGIN_PGML
[:::x^2 + 6x:::]
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 36,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 36,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 11,
                    "to": 28,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 11,
                            "to": 28,
                            "children": [
                                {
                                    "name": "MathMode",
                                    "from": 11,
                                    "to": 27,
                                    "children": [
                                        { "name": "MathModeMark", "from": 11, "to": 15 },
                                        { "name": "MathModeMark", "from": 23, "to": 27 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 28, "to": 36 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '17'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '17'
    type: 'indent'
    stack: [
      [ # 0
        allowDblStar: 'true'
        allowStar: 'true'
        allowTriStar: 'true'
        children: [
          {
            combine: { text: 'type' }
            from: '4'
            to: '12'
            type: 'text'
            stack: ['x^2 + 6x']
          }
        ]
        display: 'true'
        from: '0'
        options: ['context', 'reduced']
        parsed: 'true'
        terminator: ':::]'
        to: '16'
        token: '[:::'
        type: 'math'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '16'
        to: '17'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]

# inline parsed math with context object

BEGIN_PGML
[:<1,2x>:]{$context}
END_PGML

==>

{
    "name": "Program",
    "from": 0,
    "to": 40,
    "children": [
        {
            "name": "PGMLBlock",
            "from": 0,
            "to": 40,
            "children": [
                { "name": "BeginPG", "from": 0, "to": 10 },
                {
                    "name": "PGMLContent",
                    "from": 11,
                    "to": 32,
                    "children": [
                        {
                            "name": "Paragraph",
                            "from": 11,
                            "to": 32,
                            "children": [
                                {
                                    "name": "MathMode",
                                    "from": 11,
                                    "to": 21,
                                    "children": [
                                        { "name": "MathModeMark", "from": 11, "to": 13 },
                                        { "name": "MathModeMark", "from": 19, "to": 21 }
                                    ]
                                },
                                {
                                    "name": "Option",
                                    "from": 21,
                                    "to": 31,
                                    "children": [
                                        { "name": "OptionMark", "from": 21, "to": 22 },
                                        {
                                            "name": "Program",
                                            "from": 22,
                                            "to": 30,
                                            "children": [
                                                {
                                                    "name": "ExpressionStatement",
                                                    "from": 22,
                                                    "to": 30,
                                                    "children": [
                                                        { "name": "ScalarVariable", "from": 22, "to": 30 }
                                                    ]
                                                }
                                            ]
                                        },
                                        { "name": "OptionMark", "from": 30, "to": 31 }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                { "name": "EndPG", "from": 32, "to": 40 }
            ]
        }
    ]
}

==>

from: '0'
parseAll: 'true'
to: '21'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '21'
    type: 'indent'
    stack: [
      [ # 0
        allowDblStar: 'true'
        allowStar: 'true'
        allowTriStar: 'true'
        children: [
          {
            combine: { text: 'type' }
            from: '2'
            to: '8'
            type: 'text'
            stack: ['<1,2x>']
          }
        ]
        from: '0'
        optionStack: [
          {
            from: '10'
            terminator: '}'
            text: '$context'
            to: '20'
            token: '{'
            type: 'options'
          }
        ]
        options: ['context', 'reduced']
        parsed: 'true'
        terminator: ':]'
        to: '20'
        token: '[:'
        type: 'math'
      ]
      [ # 1
        combine: { text: 'type' }
        from: '20'
        to: '21'
        type: 'text'
        stack: ['\n']
      ]
    ]
  ]
]
