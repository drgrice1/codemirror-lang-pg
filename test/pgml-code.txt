# code block without class

BEGIN_PGML
```
[@ $x = 5 + random(1, 3) @]

this is code?
```
END_PGML

==>

Program(PGMLBlock(BeginPG, PGMLContent(Paragraph(Code(CodeMark, CodeText, CodeMark))), EndPG))

==>

from: '0'
parseAll: 'true'
to: '50'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '50'
    type: 'indent'
    stack: [
      [ # 0
        allowPar: 'true'
        from: '0'
        terminator: '```'
        to: '50'
        token: '```'
        type: 'code'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '3'
            to: '47'
            type: 'text'
            stack: ['\n', '[@', ' $x = 5 ', '+ ', 'random', '(', '1, ', '3) ', '@]', '\n\n', 'this is code?', '\n']
          ]
        ]
      ]
    ]
  ]
]

# code block with class

BEGIN_PGML
```perl
[@ $x = 5 + random(1, 3) @]

this is code?
```
END_PGML

==>

Program(PGMLBlock(BeginPG, PGMLContent(Paragraph(Code(CodeMark, CodeClass, CodeText, CodeMark))), EndPG))

==>

from: '0'
parseAll: 'true'
to: '54'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '54'
    type: 'indent'
    stack: [
      [ # 0
        allowPar: 'true'
        class: 'perl'
        from: '0'
        terminator: '```'
        to: '54'
        token: '```'
        type: 'code'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '7'
            to: '51'
            type: 'text'
            stack: ['\n', '[@', ' $x = 5 ', '+ ', 'random', '(', '1, ', '3) ', '@]', '\n\n', 'this is code?', '\n']
          ]
        ]
      ]
    ]
  ]
]
