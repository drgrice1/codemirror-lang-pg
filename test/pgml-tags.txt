# default div tag

BEGIN_PGML
[< basic div [`x + 3`] >]
END_PGML

==>

Program(PGMLBlock(BeginPG, PGMLContent(Paragraph(Tag(TagMark, MathMode(MathModeMark, MathModeMark), TagMark))), EndPG))

==>

from: '0'
parseAll: 'true'
to: '25'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '25'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        isContainer: 'true'
        options: ['html', 'tex', 'ptx']
        terminator: '>]'
        to: '25'
        token: '[<'
        type: 'tag'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '2'
            to: '13'
            type: 'text'
            stack: [' basic div ']
          ]
          [ # 1
            children: [
              {
                combine: { text: 'type' }
                from: '15'
                to: '20'
                type: 'text'
                stack: ['x + 3']
              }
            ]
            containerEnd: '/>\]/'
            from: '13'
            terminator: '`]'
            to: '22'
            token: '[`'
            type: 'math'
          ]
          [ # 2
            combine: { text: 'type' }
            from: '22'
            to: '23'
            type: 'text'
            stack: [' ']
          ]
        ]
      ]
    ]
  ]
]

# span tag with attributes and tex alternative

BEGIN_PGML
[<span with equation [`x + y = 3`].>]{ [ 'span', style => 'color:darkBlue' ] }{ ['\color{blue}'] }
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Paragraph(
                Tag(TagMark, MathMode(MathModeMark, MathModeMark), TagMark),
                Option(
                    OptionMark,
                    Program(
                        ExpressionStatement(
                            ArrayRef(
                                "[",
                                StringSingleQuoted,
                                Comma,
                                Pair(Identifier, FatComma, StringSingleQuoted),
                                "]"
                            )
                        )
                    ),
                    OptionMark
                ),
                Option(OptionMark, Program(ExpressionStatement(ArrayRef("[", StringSingleQuoted, "]"))), OptionMark)
            )
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '98'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '98'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        isContainer: 'true'
        optionStack: [
          {
            from: '37'
            terminator: '}'
            text: ' [ 'span', style => 'color:darkBlue' ] '
            to: '78'
            token: '{'
            type: 'options'
          },
          {
            from: '78'
            terminator: '}'
            text: ' ['\color{blue}'] '
            to: '98'
            token: '{'
            type: 'options'
          }
        ]
        options: ['html', 'tex', 'ptx']
        terminator: '>]'
        to: '98'
        token: '[<'
        type: 'tag'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '2'
            to: '21'
            type: 'text'
            stack: ['span with equation ']
          ]
          [ # 1
            children: [
              {
                combine: { text: 'type' }
                from: '23'
                to: '32'
                type: 'text'
                stack: ['x + y = 3']
              }
            ]
            containerEnd: '/>\]/'
            from: '21'
            terminator: '`]'
            to: '34'
            token: '[`'
            type: 'math'
          ]
          [ # 2
            combine: { text: 'type' }
            from: '34'
            to: '35'
            type: 'text'
            stack: ['.']
          ]
        ]
      ]
    ]
  ]
]

# div tag with multiline content

BEGIN_PGML
[<
    div with equation [`x^2 + y^2 = 3`].

    [! default icon !]{'defaulticon.png'}{100}

    contents are indented
>]{ [ 'div', style => 'color:darkBlue', data_testing => 'my test data' ] }{ ['\color{blue}'] }
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Paragraph(
                Tag(
                    TagMark,
                    MathMode(MathModeMark, MathModeMark),
                    Image(ImageMark, ImageMark),
                    Option(OptionMark, Program(ExpressionStatement(StringSingleQuoted)), OptionMark),
                    Option(OptionMark, Program(ExpressionStatement(Integer)), OptionMark),
                    TagMark
                ),
                Option(
                    OptionMark,
                    Program(
                        ExpressionStatement(
                            ArrayRef(
                                "[",
                                StringSingleQuoted,
                                Comma,
                                Pair(Identifier, FatComma, StringSingleQuoted),
                                Comma,
                                Pair(Identifier, FatComma, StringSingleQuoted),
                                "]"
                            )
                        )
                    ),
                    OptionMark
                ),
                Option(OptionMark, Program(ExpressionStatement(ArrayRef("[", StringSingleQuoted, "]"))), OptionMark)
            )
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '213'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '213'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        isContainer: 'true'
        optionStack: [
          {
            from: '121'
            terminator: '}'
            text: ' [ 'div', style => 'color:darkBlue', data_testing => 'my test data' ] '
            to: '193'
            token: '{'
            type: 'options'
          },
          {
            from: '193'
            terminator: '}'
            text: ' ['\color{blue}'] '
            to: '213'
            token: '{'
            type: 'options'
          }
        ]
        options: ['html', 'tex', 'ptx']
        terminator: '>]'
        to: '213'
        token: '[<'
        type: 'tag'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '2'
            to: '25'
            type: 'text'
            stack: ['\n', 'div with equation ']
          ]
          [ # 1
            children: [
              {
                combine: { text: 'type' }
                from: '27'
                to: '40'
                type: 'text'
                stack: ['x^2 + y^2 = 3']
              }
            ]
            containerEnd: '/>\]/'
            from: '25'
            terminator: '`]'
            to: '42'
            token: '[`'
            type: 'math'
          ]
          [ # 2
            combine: { text: 'type' }
            from: '42'
            to: '43'
            type: 'text'
            stack: ['.']
          ]
          [ # 3
            from: '43'
            noIndent: '1'
            to: '45'
            token: '\n\n'
            type: 'par'
          ]
          [ # 4
            children: [
              {
                combine: { text: 'type' }
                from: '51'
                to: '65'
                type: 'text'
                stack: [' default icon ']
              }
            ]
            containerEnd: '/>\]/'
            from: '49'
            optionStack: [
              {
                containerEnd: '/>\]/'
                from: '67'
                terminator: '}'
                text: ''defaulticon.png''
                to: '86'
                token: '{'
                type: 'options'
              },
              {
                containerEnd: '/>\]/'
                from: '86'
                terminator: '}'
                text: '100'
                to: '91'
                token: '{'
                type: 'options'
              }
            ]
            options: ['source', 'width', 'height', 'image_options']
            terminator: '!]'
            to: '91'
            token: '[!'
            type: 'image'
          ]
          [ # 5
            from: '91'
            noIndent: '1'
            to: '93'
            token: '\n\n'
            type: 'par'
          ]
          [ # 6
            combine: { text: 'type' }
            from: '97'
            to: '119'
            type: 'text'
            stack: ['contents are indented', '\n']
          ]
        ]
      ]
    ]
  ]
]

# div tag with answer rule and math content

BEGIN_PGML
[<
    [_]*{$matrix} [``\begin{bmatrix} a \\ b \end{bmatrix} = \begin{bmatrix} 0 \\ 0 \end{bmatrix}``]
>]{ [ class => 'ww-feedback-container ww-fb-align-middle' ] }
END_PGML

==>

Program(
    PGMLBlock(
        BeginPG,
        PGMLContent(
            Paragraph(
                Tag(
                    TagMark,
                    AnswerRule,
                    Option(OptionMark, Program(ExpressionStatement(ScalarVariable)), OptionMark),
                    MathMode(MathModeMark, MathModeMark),
                    TagMark
                ),
                Option(
                    OptionMark,
                    Program(ExpressionStatement(ArrayRef("[", Pair(Identifier, FatComma, StringSingleQuoted), "]"))),
                    OptionMark
                )
            )
        ),
        EndPG
    )
)

==>

from: '0'
parseAll: 'true'
to: '164'
type: 'root'
stack: [
  [ # 0
    combine: { indent: 'indent', list: { indent: '1' }, par: 'true' }
    from: '0'
    indent: '0'
    to: '164'
    type: 'indent'
    stack: [
      [ # 0
        from: '0'
        isContainer: 'true'
        optionStack: [
          {
            from: '105'
            terminator: '}'
            text: ' [ class => 'ww-feedback-container ww-fb-align-middle' ] '
            to: '164'
            token: '{'
            type: 'options'
          }
        ]
        options: ['html', 'tex', 'ptx']
        terminator: '>]'
        to: '164'
        token: '[<'
        type: 'tag'
        stack: [
          [ # 0
            combine: { text: 'type' }
            from: '2'
            to: '7'
            type: 'text'
            stack: ['\n']
          ]
          [ # 1
            from: '7'
            hasStar: '1'
            optionStack: [
              {
                containerEnd: '/>\]/'
                from: '11'
                terminator: '}'
                text: '$matrix'
                to: '20'
                token: '{'
                type: 'options'
              }
            ]
            options: ['answer', 'width', 'name', 'cmp_options']
            to: '20'
            token: '[_]*'
            type: 'answer'
          ]
          [ # 2
            combine: { text: 'type' }
            from: '20'
            to: '21'
            type: 'text'
            stack: [' ']
          ]
          [ # 3
            children: [
              {
                combine: { text: 'type' }
                from: '24'
                to: '99'
                type: 'text'
                stack: ['\begin{bmatrix} a \\ b \end{bmatrix} = \begin{bmatrix} 0 \\ 0 \end{bmatrix}']
              }
            ]
            containerEnd: '/>\]/'
            displaystyle: 'true'
            from: '21'
            terminator: '``]'
            to: '102'
            token: '[``'
            type: 'math'
          ]
          [ # 4
            combine: { text: 'type' }
            from: '102'
            to: '103'
            type: 'text'
            stack: ['\n']
          ]
        ]
      ]
    ]
  ]
]
