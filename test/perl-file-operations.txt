# file test operations

1 if -r $fileName && -w $fileName;
1 if -x $fileName || -o $fileName;
1 if -R $fileName;
1 if -W $fileName;
1 if -X $fileName;
1 if -O $fileName;
1 if -z $fileName;
1 if -s $fileName;
1 if -f $fileName;
1 if -d $fileName;
1 if -l $fileName;
1 if -p $fileName;
1 if -S $fileName;
1 if -b $fileName;
1 if -c $fileName;
1 if -t $fileName;
1 if -u $fileName;
1 if -g $fileName;
1 if -k $fileName;
1 if -T $fileName;
1 if -B $fileName;
1 if -M $fileName;
1 if -A $fileName;
1 if -C $fileName;

==>

Program(
    SingleLineStatement(
        Integer,
        if,
        Arguments(
            BinaryExpression(FileTest(FileTestOp, ScalarVariable), LogicOp, FileTest(FileTestOp, ScalarVariable))
        ),
        ";"
    ),
    SingleLineStatement(
        Integer,
        if,
        Arguments(
            BinaryExpression(FileTest(FileTestOp, ScalarVariable), LogicOp, FileTest(FileTestOp, ScalarVariable))
        ),
        ";"
    ),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";"),
    SingleLineStatement(Integer, if, Arguments(FileTest(FileTestOp, ScalarVariable)), ";")
)

# file io operators

my $data = <STDIN>;
my $data = <INFILE>;
my $data = <$fh>;
my @files = <*.txt>;
my @files = < foo.txt >;
my $input = <>;
my $input = <<>>;

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", IOOperator(IOOperatorStart, STDIN, IOOperatorEnd)),
        ";"
    ),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            IOOperator(IOOperatorStart, Identifier, IOOperatorEnd)
        ),
        ";"
    ),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            IOOperator(IOOperatorStart, ScalarVariable, IOOperatorEnd)
        ),
        ";"
    ),
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ArrayVariable), "=", IOOperator(IOOperatorStart, Glob, IOOperatorEnd)),
        ";"
    ),
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ArrayVariable), "=", IOOperator(IOOperatorStart, Glob, IOOperatorEnd)),
        ";"
    ),
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", IOOperator(IOOperatorStart, IOOperatorEnd)),
        ";"
    ),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            IOOperator(IOOperatorStart, ReadonlySTDIN, IOOperatorEnd)
        ),
        ";"
    )
)
