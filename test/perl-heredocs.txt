# single quoted tag

print(<< 'END');
basic text content
END

==>

Program(
    ExpressionStatement(OutputFunction(print, "(", HeredocInitializer("<<", HeredocStartIdentifier), ")"), ";"),
    UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier)
)

# doubled quoted tag

my $m = << "END";
deref hash access: $var->{b} $var2->{a}{b} $var3->{a}->{b}
dereferenced scalar reference ${\($a + 2)}
dereferenced arary reference @{['a' . 'b']}
interpolated package variable $Foo::Package::var
END

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        ";"
    ),
    InterpolatedHeredocBody(
        InterpolatedStringContent,
        HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
        InterpolatedStringContent,
        HashAccessVariable(
            HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
            "{",
            Identifier,
            "}"
        ),
        InterpolatedStringContent,
        HashAccessVariable(
            HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
            ArrowOperator,
            "{",
            Identifier,
            "}"
        ),
        InterpolatedStringContent,
        ScalarDereference(
            "$",
            "{",
            UnaryExpression(RefOp, List("(", BinaryExpression(ScalarVariable, ArithOp, Integer), ")")),
            "}"
        ),
        InterpolatedStringContent,
        ArrayDereference(
            "@",
            "{",
            ArrayRef("[", BinaryExpression(StringSingleQuoted, ConcatOp, StringSingleQuoted), "]"),
            "}"
        ),
        InterpolatedStringContent,
        PackageVariable(PackageName(ScalarVariable, "::", Identifier), "::", PackageVariableName(Identifier)),
        InterpolatedStringContent,
        HeredocEndIdentifier
    )
)

# unquoted tag

my $m = <<END;
variable: $var
array access: $a[1]
deref array access: $a->[1] $a->[-1] $b->[1][1] $c->[1]->[1]
hash access: $var{b}
END

==>

Program(
    ExpressionStatement(
        Assignment(VariableDeclaration(my, ScalarVariable), "=", HeredocInitializer("<<", HeredocStartIdentifier)),
        ";"
    ),
    InterpolatedHeredocBody(
        InterpolatedStringContent,
        ScalarVariable,
        InterpolatedStringContent,
        ArrayAccessVariable(ScalarVariable, "[", Integer, "]"),
        InterpolatedStringContent,
        ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
        InterpolatedStringContent,
        ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", ArithOp, Integer, "]"),
        InterpolatedStringContent,
        ArrayAccessVariable(ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"), "[", Integer, "]"),
        InterpolatedStringContent,
        ArrayAccessVariable(
            ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
            ArrowOperator,
            "[",
            Integer,
            "]"
        ),
        InterpolatedStringContent,
        HashAccessVariable(ScalarVariable, "{", Identifier, "}"),
        InterpolatedStringContent,
        HeredocEndIdentifier
    )
)

# backslashed tag

say <<\END;
uninterpolated content $var
END

==>

Program(
    ExpressionStatement(OutputFunction(say, HeredocInitializer("<<", HeredocStartIdentifier)), ";"),
    UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier)
)

# backtick quoted tag

print(<< `END`);
echo 'hello $var'
END

==>

Program(
    ExpressionStatement(OutputFunction(print, "(", HeredocInitializer("<<", HeredocStartIdentifier), ")"), ";"),
    InterpolatedHeredocBody(InterpolatedStringContent, ScalarVariable, InterpolatedStringContent, HeredocEndIdentifier)
)

# tag with space at end consumed

print(<< 'END');
basic text content
END 
END

print(<< "END");
basic text content
END 
END

==>

Program(
    ExpressionStatement(OutputFunction(print, "(", HeredocInitializer("<<", HeredocStartIdentifier), ")"), ";"),
    UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
    ExpressionStatement(OutputFunction(print, "(", HeredocInitializer("<<", HeredocStartIdentifier), ")"), ";"),
    InterpolatedHeredocBody(InterpolatedStringContent, HeredocEndIdentifier)
)

# indented tag is consumed

print(<< 'END');
basic text content
    END
END

print(<<END);
basic text content
    END
END

==>

Program(
    ExpressionStatement(OutputFunction(print, "(", HeredocInitializer("<<", HeredocStartIdentifier), ")"), ";"),
    UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
    ExpressionStatement(OutputFunction(print, "(", HeredocInitializer("<<", HeredocStartIdentifier), ")"), ";"),
    InterpolatedHeredocBody(InterpolatedStringContent, HeredocEndIdentifier)
)

# indented heredoc

print <<~ 'EOF';
    this is indented
    EOF

print <<~ "EOF";
    this is indented and $var is interpolated
    EOF

==>

Program(
    ExpressionStatement(OutputFunction(print, HeredocInitializer("<<", HeredocStartIdentifier)), ";"),
    UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
    ExpressionStatement(OutputFunction(print, HeredocInitializer("<<", HeredocStartIdentifier)), ";"),
    InterpolatedHeredocBody(InterpolatedStringContent, ScalarVariable, InterpolatedStringContent, HeredocEndIdentifier)
)

# multiple heredocs

print(<< 'THIS', << "THAT");
this text $var
THIS
that text $var
THAT

print(<<THIS, << 'THAT', << "THEN");
this text $var
THIS
that text $var
THAT
then text $var
THEN

==>

Program(
    ExpressionStatement(
        OutputFunction(
            print,
            "(",
            HeredocInitializer("<<", HeredocStartIdentifier),
            Comma,
            HeredocInitializer("<<", HeredocStartIdentifier),
            ")"
        ),
        ";"
    ),
    UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
    InterpolatedHeredocBody(InterpolatedStringContent, ScalarVariable, InterpolatedStringContent, HeredocEndIdentifier),
    ExpressionStatement(
        OutputFunction(
            print,
            "(",
            HeredocInitializer("<<", HeredocStartIdentifier),
            Comma,
            HeredocInitializer("<<", HeredocStartIdentifier),
            Comma,
            HeredocInitializer("<<", HeredocStartIdentifier),
            ")"
        ),
        ";"
    ),
    InterpolatedHeredocBody(InterpolatedStringContent, ScalarVariable, InterpolatedStringContent, HeredocEndIdentifier),
    UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
    InterpolatedHeredocBody(InterpolatedStringContent, ScalarVariable, InterpolatedStringContent, HeredocEndIdentifier)
)

# heredocs with quote like operator mixed in

print(<< 'END', q{quote-like content});
heredoc content
END

print(<< "THIS", qq!middle quote like!, << 'THAT');
this text $var
THIS
that text $var
THAT

==>

Program(
    ExpressionStatement(
        OutputFunction(
            print,
            "(",
            HeredocInitializer("<<", HeredocStartIdentifier),
            Comma,
            StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter),
            ")"
        ),
        ";"
    ),
    UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
    ExpressionStatement(
        OutputFunction(
            print,
            "(",
            HeredocInitializer("<<", HeredocStartIdentifier),
            Comma,
            StringQqQuoted(qq, QuoteLikeStartDelimiter, InterpolatedStringContent, QuoteLikeEndDelimiter),
            Comma,
            HeredocInitializer("<<", HeredocStartIdentifier),
            ")"
        ),
        ";"
    ),
    InterpolatedHeredocBody(InterpolatedStringContent, ScalarVariable, InterpolatedStringContent, HeredocEndIdentifier),
    UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier)
)

# quote like operator containing dereferenced quantities with heredoc starts

say qq{before @{[ << 'INNER1' ]}middle ${\( <<INNER2 )}after};
inside interpolated array deref $var
INNER1
inside interpolated scalar deref $var2
INNER2

==>

Program(
    ExpressionStatement(
        OutputFunction(
            say,
            StringQqQuoted(
                qq,
                QuoteLikeStartDelimiter,
                InterpolatedStringContent,
                ArrayDereference("@", "{", ArrayRef("[", HeredocInitializer("<<", HeredocStartIdentifier), "]"), "}"),
                InterpolatedStringContent,
                ScalarDereference(
                    "$",
                    "{",
                    UnaryExpression(
                        RefOp,
                        List("(", HeredocInitializer("<<", HeredocStartIdentifier), ")")
                    ),
                    "}"
                ),
                InterpolatedStringContent,
                QuoteLikeEndDelimiter
            )
        ),
        ";"
    ),
    UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
    InterpolatedHeredocBody(InterpolatedStringContent, ScalarVariable, InterpolatedStringContent, HeredocEndIdentifier)
)

# interpolated heredoc with body containing dereferenced quantity that starts another heredoc

print << "END";
@{[ << "INNER" ]}
inner stuff $var
INNER
outer stuff $var
END

==>

Program(
    ExpressionStatement(OutputFunction(print, HeredocInitializer("<<", HeredocStartIdentifier)), ";"),
    InterpolatedHeredocBody(
        ArrayDereference("@", "{", ArrayRef("[", HeredocInitializer("<<", HeredocStartIdentifier), "]"), "}"),
        InterpolatedHeredocBody(
            InterpolatedStringContent,
            ScalarVariable,
            InterpolatedStringContent,
            HeredocEndIdentifier
        ),
        InterpolatedStringContent,
        ScalarVariable,
        InterpolatedStringContent,
        HeredocEndIdentifier
    )
)

# interpolated heredoc with nested dereferencing and quoting

print << "END";
before
@{[ qq{inside quote like ${\("interpolate $var")} in heredoc} ]}
after
END

==>

Program(
    ExpressionStatement(OutputFunction(print, HeredocInitializer("<<", HeredocStartIdentifier)), ";"),
    InterpolatedHeredocBody(
        InterpolatedStringContent,
        ArrayDereference(
            "@",
            "{",
            ArrayRef(
                "[",
                StringQqQuoted(
                    qq,
                    QuoteLikeStartDelimiter,
                    InterpolatedStringContent,
                    ScalarDereference(
                        "$",
                        "{",
                        UnaryExpression(
                            RefOp,
                            List("(", StringDoubleQuoted(InterpolatedStringContent, ScalarVariable), ")")
                        ),
                        "}"
                    ),
                    InterpolatedStringContent,
                    QuoteLikeEndDelimiter
                ),
                "]"
            ),
            "}"
        ),
        InterpolatedStringContent,
        HeredocEndIdentifier
    )
)

# end matter after heredoc end tag

my $test = << 'END_DOC'
hello
END_DOC
;

print(<< "END"
content of heredoc
with interpolated $var
END
);

==>

Program(
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            HeredocInitializer("<<", HeredocStartIdentifier),
            UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier)
        ),
        ";"
    ),
    ExpressionStatement(
        OutputFunction(
            print,
            "(",
            HeredocInitializer("<<", HeredocStartIdentifier),
            InterpolatedHeredocBody(
                InterpolatedStringContent,
                ScalarVariable,
                InterpolatedStringContent,
                HeredocEndIdentifier
             ),
            ")"
        ),
        ";"
    )
)

# heredoc with dereferenced array with quotelike also with dereferenced array that starts another heredoc

print << "END1";
first heredoc before
@{[ qq{quoteLike before @{[<< 'END2' ]}qouteLike after} ]}
inner heredoc content
END2
first heredoc after
END1

print << "END1";
first heredoc before
@{[ qq{quoteLike before @{[<< 'END2'
inner heredoc content
END2
]}quoteLike after} ]}
first heredoc after
END1

==>

Program(
    ExpressionStatement(OutputFunction(print, HeredocInitializer("<<", HeredocStartIdentifier)), ";"),
    InterpolatedHeredocBody(
        InterpolatedStringContent,
        ArrayDereference(
            "@",
            "{",
            ArrayRef(
                "[",
                StringQqQuoted(
                    qq,
                    QuoteLikeStartDelimiter,
                    InterpolatedStringContent,
                    ArrayDereference(
                        "@",
                        "{",
                        ArrayRef("[", HeredocInitializer("<<", HeredocStartIdentifier), "]"),
                        "}"
                    ),
                    InterpolatedStringContent,
                    QuoteLikeEndDelimiter
                ),
                "]"
            ),
            "}"
        ),
        UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
        InterpolatedStringContent,
        HeredocEndIdentifier
    ),
    ExpressionStatement(OutputFunction(print, HeredocInitializer("<<", HeredocStartIdentifier)), ";"),
    InterpolatedHeredocBody(
        InterpolatedStringContent,
        ArrayDereference(
            "@",
            "{",
            ArrayRef(
                "[",
                StringQqQuoted(
                    qq,
                    QuoteLikeStartDelimiter,
                    InterpolatedStringContent,
                    ArrayDereference(
                        "@",
                        "{",
                        ArrayRef(
                            "[",
                            HeredocInitializer("<<", HeredocStartIdentifier),
                            UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
                            "]"
                        ),
                        "}"
                    ),
                    InterpolatedStringContent,
                    QuoteLikeEndDelimiter
                ),
                "]"
            ),
            "}"
        ),
        InterpolatedStringContent,
        HeredocEndIdentifier
    )
)

# heredoc started inside qq string with text after on same line and ended after body

say qq{quoteLike before @{[<< 'END' ]}quoteLike after
inner heredoc content
END
};

==>

Program(
    ExpressionStatement(
        OutputFunction(
            say,
            StringQqQuoted(
                qq,
                QuoteLikeStartDelimiter,
                InterpolatedStringContent,
                ArrayDereference("@", "{", ArrayRef("[", HeredocInitializer("<<", HeredocStartIdentifier), "]"), "}"),
                InterpolatedStringContent,
                UninterpolatedHeredocBody(StringContent, HeredocEndIdentifier),
                InterpolatedStringContent,
                QuoteLikeEndDelimiter
            )
        ),
        ";"
    )
)
