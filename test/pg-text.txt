# perl command

BEGIN_TEXT
\{ $ans->ans_rule(10) \}
END_TEXT

==>

Program(
    PGTextBlock(
        BeginPG,
        PGTextContent(
            PerlCommand(
                PerlCommandMark,
                Program(
                    ExpressionStatement(
                        MethodInvocation(
                            ScalarVariable,
                            ArrowOperator,
                            FunctionName(Identifier),
                            ParenthesizedArguments("(", Integer, ")")
                        )
                    )
                ),
                PerlCommandMark
            )
        ),
        EndPG
    )
)

# variable substitution

BEGIN_TEXT
Line one
$PAR
Variable $a
${ PAR }
End line
END_TEXT

==>

Program(PGTextBlock(BeginPG, PGTextContent(Variable, Variable, Variable), EndPG))

# emphasis

BEGIN_TEXT
$BBOLD bold text $EBOLD
$PAR
${BITALIC}italic text${EITALIC}
$PAR
$BBOLD$BITALIC italic bold text $EITALIC$EBOLD
END_TEXT

==>

Program(
    PGTextBlock(
        BeginPG,
        PGTextContent(
            StrongEmphasis(EmphasisMark, EmphasisMark),
            Variable,
            Emphasis(EmphasisMark, EmphasisMark),
            Variable,
            StrongEmphasis(EmphasisMark, Emphasis(EmphasisMark, EmphasisMark), EmphasisMark)
        ),
        EndPG
    )
)

# math mode

BEGIN_TEXT
\(x + $a\)
\[\frac{x}{3}\]
\[\(error nested math mode\)\]
\[
    x + 3
\]
END_TEXT

==>

Program(
    PGTextBlock(
        BeginPG,
        PGTextContent(
            InlineMathMode(MathModeMark, Variable, MathModeMark),
            DisplayMathMode(MathModeMark, MathModeMark),
            DisplayMathMode(MathModeMark, PGTextError, MathModeMark),
            DisplayMathMode(MathModeMark, MathModeMark)
        ),
        EndPG
    )
)

# parsed math mode

BEGIN_TEXT
`x / 3`
``x / 3``
`x / 3`*
``x / 3``*
`x / 3```x + 3``
`$a x / 5`
END_TEXT

==>

Program(
    PGTextBlock(
        BeginPG,
        PGTextContent(
            ParsedMathMode(ParsedMathModeMark, ParsedMathModeMark),
            ParsedMathMode(ParsedMathModeMark, ParsedMathModeMark),
            ParsedMathMode(ParsedMathModeMark, ParsedMathModeMark),
            ParsedMathMode(ParsedMathModeMark, ParsedMathModeMark)
            ParsedMathMode(ParsedMathModeMark, ParsedMathModeMark)
            ParsedMathMode(ParsedMathModeMark, ParsedMathModeMark)
            ParsedMathMode(ParsedMathModeMark, Variable, ParsedMathModeMark)
        ),
        EndPG
    )
)
